---
title: "Importing data"
execute: 
  warning: false
format: 
  html:
    code-fold: false
    code-summary: "Show the code"
editor: visual
---

## Libraries

Kerakli librarilarni chaqirib olamiz.

```{r}
library(readr) #importing (reading)/exporting (writing) tabular data
library(readxl) #importing excel files
library(here)
library(tidyverse)
here()
```

## Data formatlari

R orqali istalgan formatdagi ma'lumotlar bilan ishlash mumkin. Ma'lumotlar quyidagi formatlarda bo'lishi mumkin:

-   tabular/delimited data (csv, text etc)
-   spreadsheets (excel, googlesheets)
-   dta (stata), SPSS
-   spatial data
-   sql and etc.

### Comma separated values (csv)

![](mtcars_comma.png)

### Semi Colon Separated Values

![](mtcars_semicolon.png)

### Space Separated Values

### ![](mtcars_space.png)

### Tab Separated Values

![](mtcars_tab.png)

## Ma'lumotlarni o'qish (reading data)

Let us begin by reading data from a `csv` file using `read_csv()`.

```{r}
read_csv('data/hsb2.csv', show_col_types = TRUE) 
```

Great! If you see the above output, you have successfully read data into R.

::: column-margin
If you see an error message (which most of us see when we are trying to read data for the first time), follow the below instructions:

-   check the separator in the file and ensure it is a `comma`

-   check the file name

-   check the file path i.e. location of the file

-   ensure that the file name or path is enclosed in single or double quotes.
:::

When you read data using `readr`, it will display the data type detected for each column/variable in the data set. If you want to check the data types before reading the data, use `spec_csv()`. We will learn to specify the column types in the next section.

```{r}
spec_csv('data/hsb2.csv') 
```

## Column Names

In some cases, files do not include **column names** or headers. If we do not indicate the absence of column names, `readr` will treat the first row from the data as the column name. Like we said before, it is a good practice to take a quick look at the data to check for the presence/absence of column names.

![](mtcars_column_false.png)

We will first read the data set without indicating the presence or absence of column names.

```{r}
read_csv('data/hsb3.csv') 
```

As you can see, in the absence of column names, `readr` has converted the first row of the data into the column names. As a result, the data is not read properly and there are lots of missing values and warnings. If the column names are absent (i.e. the column names are provided in a separate file), use the `col_names` argument and set it to `FALSE`. Now `readr` will not convert the first row of data into column name and instead it will generate new column names.

```{r}
read_csv('data/hsb3.csv', col_names = FALSE)
```

We may not always want to use the column names generated by `readr` and instead specify new column names. In such cases, we can use `col_names` to supply column names as shown in the below example. Let us reread `hsb3` and specify column names.

```{r}
cnames <- c("id", "gender", "race", "socio_economic_status", 
            "school_type", "program", "read", "write", "math", 
            "science", "socst")

read_csv('data/hsb3.csv', col_names = cnames)
```

### Skip Lines

In certain files, you will find information related to the data such as:

-   the data source

-   column names

-   column description

-   copyright etc.

The data will appear after/below such text/information. While reading data from such files, we need to skip all the rows where the text is present. If we do not skip them, `readr` will consider them as part of the data.

![](mtcars_skip.png)

Let us read the data without skipping any lines/rows and observe the result.

```{r}
read_csv('data/hsb4.csv')
```

Use `skip` argument to indicate the number of lines/rows to be skipped while reading data from a file. For example, if the file has contents other than data in the first few lines, we need to skip them before reading the data. In the below example, we will skip the first 3 lines as they contain information about the data set which we do not need.

```{r}
read_csv('data/hsb4.csv', skip = 25)
```

### Maximum Lines

Suppose the data file contains several thousands of rows of data and we do not want to read all of it. What can we do in such cases? `readr` allows us to specify the maximum number of rows to be read using the `n_max` argument. Suppose we want to read only 100 rows of data from a file, we can set `n_max` equal to 100. In the next example, we will read the first 120 rows from the `hsb2` file. If you observe the last row in the output, it says `# ... with 110 more rows`, indicating that only 120 rows of data has been read from the file.

```{r}
read_csv('data/hsb2.csv', n_max = 120)
```

### Column Types

If you have observed carefully, when you read data using `readr`, it displays the column names and column types followed by the first 10 rows of data. `readr` determines the data type for each column based on the first 1000 rows of data. The data can be of the following types:

-   integer

-   double (decimal point)

-   logical (TRUE/FALSE)

-   character (text/string)

-   factor (categorical/qualitative)

-   date/time

![](column_types_list_canva.png)

Before you read data from a file, use `spec_csv()` to see the data types as determined by `readr`. If it determines the data types correctly, you can go ahead and read the data else we will have to specify the data types and we will have to do that for all the columns we want to read and not just for those columns whose data type was wrongly determined by `readr`.

To specify the data types, we will use the `col_types` argument and supply it a list of data types. The data types can be specified using:

-   `col_integer()`

-   `col_double()`

-   `col_factor()`

-   `col_logical()`

-   `col_character()`

-   `col_date()`

-   `col_time()`

-   `col_datetime()`

While specifying the data types we also need to specify the categories of the categorical/qualitative variable. To do that, we use the `levels` argument within `col_factor()`. Let us read data from the `hsb2.csv` file to understand data type specification.

```{r}
read_csv('data/hsb2.csv', col_types = list(
  col_integer(), col_factor(), 
  col_factor(), col_factor(), 
  col_factor(), col_factor(),
  col_integer(), col_integer(), col_integer(), col_integer(),
  col_integer())            
)
```

If we do not specify the data type for all columns, `readr` will return an error which leads to the following questions:

1.  What if I want to skip a few columns?

2.  What if I want to read certain columns only?

### Specific Columns

![](column_objective_function_map.png)

For the first scenario, we can use `col_skip()` i.e. instead of specifying the data type, we indicate to `readr` to skip that particular column while reading the data.

In case of the second scenario, we will use `cols_only()` to specify the columns to be read i.e. instead of using `list()` to supply the data types, we will use `cols_only()` and provide the following details:

-   column name;

-   column type using `col_types` argument.

```{r}
read_csv('data/hsb2.csv', 
         col_types = cols_only(id = col_integer(), 
                               prog = col_factor(), read = col_integer())
)
```

If you have a data set with 10 columns and plan to skip only a couple of columns, use `col_skip()` instead if you plan to read only a couple of columns, use `cols_only()`.

## Reading excel data

Excel fayllarni o'qish uchun `readrxl` packagedan foydalanamiz.

```{r}
library(readxl)
```

Ushbu funksiyaning bir nechta argumentlari mavjud. Ularning eng muhimlari quyidagilar:

-   `sheet` - qaysi listni olishni ko'rsatadi;

-   `col_names` - birinchi ustun nomlari sifatida qaralishi kerak yoki yo'qligini/ustun nomlarni bir paytda o'zgartirish imkonini ham beradi

-   `skip` - datani o'qishda uning dastlabki bir nechta qatorini tashlab ketish uchun ishlatiladi.

### List Sheets

An excel file may contain several sheets. Let us see how many sheets are present in `sample.xls` file and their respective names using `excel_sheets()`.

```{r}
excel_sheets('data/sample.xls')
```

### Read Sheet

Now that we know the number of sheets and their names, let us read data from the `ecom` sheet of the `sample.xls` file using `read_excel()`. We will specify the file name, and the sheet name or sheet number.

#### Case 1: Specify the sheet number

```{r}
read_excel('data/sample.xls', sheet = 3) 
```

#### Case 2: Specify the sheet name

```{r}
read_excel('data/sample.xls', sheet = 'ecom')
```

Notice when you use the sheet name, the name should be enclosed in single/double quotes.

### Read Specific Cells

You may not always want to read all the columns or rows from the excel sheet. In such cases, you can specify the cells from which the data must be read which can be achieved using the `range` argument. So how do we specify the cells from which to read data? There are different ways of specifying the cell range and we will look at them one by one:

#### Method 1

The first method uses the cell names along with `:` to specify the cell range. For example, to read data from first 4 rows of columns **B** and **C**, we will specify the range as `"B1:C4"`.

```{r}
read_excel('data/sample.xls', sheet = 3, range = "B1:C4")
```

To read data from first 5 rows of columns **A**, **B** and **C**, we will specify the range as `"A1:C5"`.

```{r}
read_excel('data/sample.xls', sheet = 3, range = "A1:C5")
```

### Method 2

In the second method, we start from a particular cell and specify the number of rows and columns to be covered keeping the initial cell as anchorage. In the below example, we want to read 3 rows and 2 columns starting from the cell `A4`.

```{r}
read_excel('data/sample.xls', sheet = 1, col_names = FALSE, 
           range = anchored("A4", dim = c(3, 2))) 
```

### Method 3

In this method, we use the `cell_limit()` and specify the location of two ends of a rectangle covering the cells we want to read. For example, to read data from the first 6 rows and 4 columns, we will specify the range as following:

-   start from the first row of the first column

-   cover all cells up to the 6th row of the 4th column

```{r}
read_excel('data/sample.xls', sheet = 1, 
           range = cell_limits(c(1, 1), c(6, 4)))
```

Let us quickly look at how we will specify range of cells using the above 3 methods when we want to read data from the first 4 rows of columns `B` and `C`:

#### Method 1

```{r}
read_excel('data/sample.xls', sheet = 1,   range = "B1:C4")
```

#### Method 2

```{r}
read_excel('data/sample.xls', sheet = 1,  
           range = anchored("B1", dim = c(4, 2)))
```

#### Method 3

```{r}
read_excel('data/sample.xls', sheet = 1,   range = cell_limits(c(1, 2), c(4, 3)))
```

#### Ustun nomlarni birdaniga o'zgartirish

```{r}
new_names <- c("a", "b", "c", "gender", "region", 
               "district", "age", "education", 
               "is_working", "is_official",  
               "q_1", "q_2", "q_3", "income",
               "q_4", "q_5", "q_6", 
               "q_7", "q_8", "q_9", "q_10") 

fergana_example <- read_excel("data/fergana.xlsx", 
                              col_names = new_names, skip = 1)
```
